# -*- coding: utf-8 -*-
"""Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TDvcQs5ud-vXtIkjy1d0uXh8chGb479g

# **Predictive Analytics - Dicoding | Assignment**

## **1. Import Library and Data**

Importing libraries from Google Colab and importing data from [GitHub](https://raw.githubusercontent.com/danalvr/MLT-Assignment-Dicoding/main/Predictive%20Analytics/data/Housing.csv)
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

url = 'https://raw.githubusercontent.com/danalvr/MLT-Assignment-Dicoding/main/Predictive%20Analytics/data/Housing.csv'
house_df = pd.read_csv(url)
house_df

"""## **2. Exploratory Data Analysis**

### 2.1 Variabel Description

Check each variable contained in the dataset
and apply data assessment.
"""

house_df.info()

house_df.describe()

house_df.isna().sum()

print("Total duplicate: ", house_df.duplicated().sum())

house_df.head()

"""### 2.2 Analysis and Visualization

#### 2.2.1 Univariate Analysis

Carry out data analysis using the univariate method by dividing it into 2 parts, namely categorical features and numerical features.

A. Categorical Features
"""

house_categorical_features = house_df.select_dtypes(include='object').columns.to_list()
print(house_categorical_features)

for col in house_categorical_features:
  count = house_df[col].value_counts()
  percent = 100*house_df[col].value_counts(normalize=True)
  df = pd.DataFrame({'Total sample':count, 'percentation':percent.round(1)})
  print('Feature: ', col)
  print(df, '\n\n')

for col in house_categorical_features:
  count = house_df[col].value_counts()
  percent = 100*house_df[col].value_counts(normalize=True)
  df = pd.DataFrame({'Total sample':count, 'percentation':percent.round(1)})
  count.plot(kind='bar', title=col);
  plt.show()
  print('\n')

"""B. Numerical Features"""

house_numerical_features = house_df.select_dtypes(exclude=['object']).columns.to_list()
print(house_numerical_features)

house_df.hist(bins=50, figsize=(20,15))
plt.show()

"""#### 2.2.2 Multivariate Analysis

Carry out data analysis using the multivariate method by dividing it into 2 parts, namely categorical features relative to price and numerical features.

A. Categorical Features Relative to Price
"""

for col in house_categorical_features:
  sns.catplot(x=col, y="price", kind="bar", dodge=False, height = 4, aspect = 3,  data=house_df, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

"""B. Numerical Features"""

plt.figure(figsize=(10, 8))
correlation_matrix = house_df.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""## **3. Data Preparation**

### 3.1 Encoding Category Feature

Perform encoding techniques on category features to provide a more appropriate representation in numerical form.
"""

from sklearn.preprocessing import  OneHotEncoder

for col in house_categorical_features:
  house_df = pd.concat([house_df, pd.get_dummies(house_df[col], prefix=col)], axis=1)
  house_df.drop(col, axis=1, inplace=True)

house_df.head()

"""### 3.2 Principal Component Analysis

Applying PCA techniques to reduce features in the dataset.
"""

sns.pairplot(house_df[['area','bathrooms','stories']], plot_kws={"s": 3});

from sklearn.decomposition import PCA

pca = PCA(n_components=3, random_state=123)
pca.fit(house_df[['area','bathrooms','stories']])
princ_comp = pca.transform(house_df[['area','bathrooms','stories']])

pca.explained_variance_ratio_.round(3)

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=123)
pca.fit(house_df[['area','bathrooms','stories']])
house_df['combination'] = pca.transform(house_df.loc[:, ('area','bathrooms','stories')]).flatten()
house_df.drop(['area','bathrooms','stories'], axis=1, inplace=True)

house_df.head()

"""### 3.3 Train-Test Split

Divide the dataset into training data and test data with a ratio of 9:1.
"""

from sklearn.model_selection import train_test_split

X = house_df.drop(["price"],axis =1)
y = house_df["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### 3.4 Standardization

Standardize to ensure all variables have a uniform scale.
"""

columns_to_remove = ['area', 'bathrooms', 'stories', 'price']
house_numerical_features_filtered = [col for col in house_numerical_features if col not in columns_to_remove]
house_numerical_features_filtered.append('combination')
print(house_numerical_features_filtered)

from sklearn.preprocessing import StandardScaler

numerical_features = house_numerical_features_filtered
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

X_train.info()

"""## **4. Modeling**

Build a model to calculate house price predictions by comparing various algorithms, namely KNN, Random Forest and Boosting to find the best accuracy results.
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""### 4.1 KNN Algorithm

Implementing the KNN algorithm.
"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""### 4.2 Random Forest Algorithm

Implementing the Random Forest algorithm.
"""

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""### 4.3 Boosting Algorithm

Implementing the Boosting algorithm.
"""

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""## **5. Evaluation**

Conduct evaluations to measure model performance using the MSE method.
"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""## **6. Prediction**

Make predictions by comparing models created with various algorithms.
"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

"""

```
# Ini diformat sebagai kode
```

"""

